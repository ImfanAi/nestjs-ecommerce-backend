version: 0.2
phases:
  install:
    commands:
      - echo "Install phase - Nothing to do"
  pre_build:
    commands:
     - REPOSITORY_URI=469754134024.dkr.ecr.eu-central-1.amazonaws.com/nyyupay
     - EKS_KUBECTL_ROLE_ARN=arn:aws:iam::469754134024:role/EksCodeBuildKubectlRole
     - EKS_CLUSTER_NAME=eksdemo
     # Verify AWS CLI Version
     - echo "Verify AWS CLI Version..."
     - aws --version
     # Login to ECR Registry for docker to push the image to ECR Repository
     - echo "Login in to Amazon ECR..."
     - $(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)
     - docker login -u $DOCKERUSERNAME -p $DOCKERTOKEN
     - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
     - TAG=${COMMIT_HASH:=latest}
     - export KUBECONFIG=$HOME/.kube/config
  build:
    commands:
     - echo Build started on `date`
     - echo Building the Docker image...
     - docker build -t $REPOSITORY_URI:latest .
     - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$TAG
  post_build:
    commands:
      - docker push $REPOSITORY_URI:latest
      - docker push $REPOSITORY_URI:$TAG
      - echo "Docker Image Push to ECR Completed -  $REPOSITORY_URI:$TAG"
      # Extracting AWS Credential Information using STS Assume Role for kubectl
      - echo "Setting Environment Variables related to AWS CLI for Kube Config Setup"
      - CREDENTIALS=$(aws sts assume-role --role-arn $EKS_KUBECTL_ROLE_ARN --role-session-name codebuild-kubectl --duration-seconds 900)
      - export AWS_ACCESS_KEY_ID="$(echo ${CREDENTIALS} | jq -r '.Credentials.AccessKeyId')"
      - export AWS_SECRET_ACCESS_KEY="$(echo ${CREDENTIALS} | jq -r '.Credentials.SecretAccessKey')"
      - export AWS_SESSION_TOKEN="$(echo ${CREDENTIALS} | jq -r '.Credentials.SessionToken')"
      - export AWS_EXPIRATION=$(echo ${CREDENTIALS} | jq -r '.Credentials.Expiration')
      # Setup kubectl with our EKS Cluster
      - echo "Update Kube Config"
      - aws eks update-kubeconfig --name $EKS_CLUSTER_NAME
      # Apply changes to our Application using kubectl
      - echo "Apply changes to kube manifests"
      - kubectl apply -f kube-manifests/
      - echo "Completed applying changes to Kubernetes Objects"
      # Create Artifacts which we can use if we want to continue our pipeline for other stages
      - printf '[{"name":"nyyupay.yaml","imageUri":"%s"}]' $REPOSITORY_URI:$TAG > build.json
      # Additional Commands to view your credentials
      #- echo "Credentials Value is..  ${CREDENTIALS}"
      #- echo "AWS_ACCESS_KEY_ID...  ${AWS_ACCESS_KEY_ID}"
      #- echo "AWS_SECRET_ACCESS_KEY...  ${AWS_SECRET_ACCESS_KEY}"
      #- echo "AWS_SESSION_TOKEN...  ${AWS_SESSION_TOKEN}"
      #- echo "AWS_EXPIRATION...  $AWS_EXPIRATION"
      #- echo "EKS_CLUSTER_NAME...  $EKS_CLUSTER_NAME"
artifacts:
  files:
    - build.json
    - kube-manifests/*
